# -*- coding: utf-8 -*-
"""K-mer_rev-K-mer_gapped-K-mer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oWf60DpGsD_3sCz7mM2x6ZmRrUdj4Rzy
"""

def readFASTAs(fileName):

    with open(fileName, 'r') as file:
        v = []
        genome = ''
        for line in file:
            if line[0] != '>':
                genome += line.strip()
            else:
                v.append(genome.upper())
                genome = ''
        v.append(genome.upper())
        del v[0]
        return v

Sequences = readFASTAs('hotCold.txt')

len(Sequences)

import itertools
import numpy as np

def generate(X):

    elements = 'ACGT'

    T = []
    for x in X:
        t = []
        for i in range(1, 4 + 1, 1):
            v = list(itertools.product(elements, repeat=i))
            for i in v:
                t.append(x.count(''.join(i)))
        T.append(t)

    T = np.array(T)

    return T

"""<br/>

* K-mer
"""

K_mer = generate(Sequences)
np.save(file = "K-mer", arr = K_mer)

"""<br/>

* Reverse complement composition of k-mers
"""

def reverseComplement(sequence):
    c = {'A':'T', 'T':'A', 'C':'G', 'G':'C'}

    v = ''
    for bp in sequence:
        v = c[bp] + v
    return v

rev_k = []
for sequence in Sequences:
    rev_k.append(reverseComplement(sequence))

rev_k = generate(rev_k)
np.save(file = "rev-k-mer", arr = rev_k)

K_mer    = np.load('K-mer.npy')
rev_k    = np.load('rev-k-mer.npy')
print(K_mer)
print("")
print(rev_k)

"""<br/>

* n-gapped k-mer
"""

def kmers(x, k):
    v = []
    for i in range(len(x) - k + 1):
        v.append(x[i:i + k])
    return v

import itertools
import numpy as np

def monoMonoGgap(x, g):  

    t = []
    m = list(itertools.product('ACGT', repeat=2))
    for i in range(1, g + 1, 1):
        V = kmers(x, i + 2)

        for gGap in m:

            C = 0
            for v in V:
                if v[0] == gGap[0] and v[-1] == gGap[1]:
                    C += 1

            t.append(C)

    return t

T = []
for x in Sequences:
    T.append(monoMonoGgap(x, 5))

T = np.array(T)
T

print(T.shape)
np.save(file = "gapped_k_mer", arr = T)

