# -*- coding: utf-8 -*-
"""XGBoostIndividualData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GKKwu7qgG4T2R8Km7T4e5RT21TWZbQSk
"""

import warnings; warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import xgboost; print(xgboost.__version__)
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

"""</br>

* Loading Arrays
"""

X_kmer = np.load('K-mer.npy')
X_revk = np.load('rev-k-mer.npy')
X_gapk = np.load('gapped_k_mer.npy')

"""</br>

* Generating Y
"""

Y  = [1 for i in range(490)]
Y += [0 for i in range(591)]
Y = np.array(Y)
print(Y.shape)

"""</br>

* Shuffle
"""

X_kmer, X_revk, X_gapk, Y = shuffle(X_kmer, X_revk, X_gapk, Y, random_state=0)

print(X_kmer.shape)
print(Y.shape)

"""</br>

* Test-Train Split
"""

Xktrain, Xktest, Yktrain, Yktest = train_test_split(X_kmer, Y, test_size=0.30, random_state=101)
Xrtrain, Xrtest, Yrtrain, Yrtest = train_test_split(X_revk, Y, test_size=0.30, random_state=101)
Xgtrain, Xgtest, Ygtrain, Ygtest = train_test_split(X_gapk, Y, test_size=0.30, random_state=101)

"""</br>

* Scaling
"""

scaler = StandardScaler()
Xktrain = scaler.fit_transform(Xktrain)
Xktest = scaler.transform(Xktest)

scaler = StandardScaler()
Xrtrain = scaler.fit_transform(Xrtrain)
Xrtest = scaler.transform(Xrtest)

scaler = StandardScaler()
Xgtrain = scaler.fit_transform(Xgtrain)
Xgtest = scaler.transform(Xgtest)

"""</br>

* Feature Selection
"""

modelk = xgboost.XGBClassifier()
modelk.fit(Xktrain, Yktrain)

modelr = xgboost.XGBClassifier()
modelr.fit(Xrtrain, Yrtrain)

modelg = xgboost.XGBClassifier()
modelg.fit(Xgtrain, Ygtrain)

importantFeatures = modelk.feature_importances_
SFk = importantFeatures.argsort()[::-1][:int(len(importantFeatures)*0.50)]

importantFeatures = modelr.feature_importances_
SFr = importantFeatures.argsort()[::-1][:int(len(importantFeatures)*0.50)]

importantFeatures = modelg.feature_importances_
SFg = importantFeatures.argsort()[::-1][:int(len(importantFeatures)*0.50)]

SFk

SFr

SFg

"""</br>

* Feature Elimination
"""

Xktrain = Xktrain[:,SFk]
Xrtrain = Xrtrain[:,SFr]
Xgtrain = Xgtrain[:,SFg]

Xktest = Xktest[:,SFk]
Xrtest = Xrtest[:,SFr]
Xgtest = Xgtest[:,SFg]

Xtrain = np.concatenate((Xktrain,Xrtrain, Xgtrain), axis=1)
Xtest = np.concatenate((Xktest, Xrtest, Xgtest), axis=1)

"""</br>


* Prediction
"""

model = xgboost.XGBClassifier()
model.fit(Xtrain, Yktrain)
Yp = model.predict(Xtest)

print(accuracy_score(y_true=Yktest, y_pred=Yp))

