# -*- coding: utf-8 -*-
"""XGBoost_hotspot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DM5dW552geWoDjbY0F7TiBWfbG2JxiC5
"""

import warnings; warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import xgboost; print(xgboost.__version__)
from sklearn.metrics import confusion_matrix
from sklearn.metrics import matthews_corrcoef
from sklearn.metrics import precision_score

"""</br>

* **data processing (Merge all data)**
"""

X_kmer = np.load('K-mer.npy')
X_revk = np.load('rev-k-mer.npy')
X_gapk = np.load('gapped_k_mer.npy')

print(X_kmer.shape)
print(X_revk.shape)
print(X_gapk.shape)

Y  = [1 for i in range(490)]
Y += [0 for i in range(591)]
Y = np.array(Y)
print(Y.shape)

X = np.concatenate((X_kmer,X_revk, X_gapk),axis=1)

X.shape

"""</br>

* **Shuffle**
"""

from sklearn.utils import shuffle
X, Y = shuffle(X, Y, random_state=0)

print(X.shape)
print(Y.shape)

"""</br>

* **Train-Test Split**
"""

from sklearn.model_selection import train_test_split
Xtrain, Xtest, Ytrain, Ytest = train_test_split(X, Y, test_size=0.30, random_state=101)

print(Xtrain.shape)
print(Ytrain.shape)
print(Xtest.shape)
print(Ytest.shape)

"""</br>

* **Scaling**
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

Xtrain = scaler.fit_transform(Xtrain)
Xtest = scaler.transform(Xtest)

"""</br>

* **Feature Selection**
"""

model = xgboost.XGBClassifier()
model.fit(Xtrain, Ytrain)

importantFeatures = model.feature_importances_
SF = importantFeatures.argsort()[::-1][:int(len(importantFeatures)*0.4)]

# argsort explained
# argsort = np.array([0.9, 0.1, 0.8, 0.4, 0.6])
# print(argsort.argsort()[::-1])

SF.shape

"""</br>

* **Model Training after Selection**
"""

from sklearn.metrics import accuracy_score

model = xgboost.XGBClassifier()
model.fit(Xtrain[:, SF], Ytrain)
Yp = model.predict(Xtest[:, SF])

# Yp

Accuracy = []
Sensitivity = []
Specificity = []
Precision = []
MCC = []

CM = confusion_matrix(y_pred=Yp, y_true=Ytest)
TN, FP, FN, TP = CM.ravel()

MCC.append(matthews_corrcoef(y_true=Ytest, y_pred=Yp))
Sensitivity.append( TP / (TP + FN) )
Specificity.append( TN / (TN + FP) )
Precision.append(precision_score(y_true=Ytest, y_pred=Yp))

print(accuracy_score(y_true=Ytest, y_pred=Yp))
print('Sensitivity: {0:.2f}'.format(np.mean(Sensitivity)))
print('Specificity: {0:.2f}'.format(np.mean(Specificity)))
print('MCC: {0:.2f}'.format(np.mean(MCC)))
print('Precision: {0:.2f}'.format(np.mean(Precision)))

